#
# This workflow is only run when a PR is merged
# The developers specify a version in the poetry toml file or it has already been bumped from a previous run
# This version is used to create and push a git tag
# A docker image gets built and tagged
# The master branch is then checked out
# We then patch and commit the version in poetry, ready for the next PR. This step is important, it
# will save developers time and will also avoid failing merges because of duplicate git tags
#
#
name: Release

on:
  pull_request:
    types: [closed]
    branches: [main]
    paths:
      - .github/workflows/version_push.yml
      - "main.py"
      - pyproject.toml

jobs:
  build_push:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # we need this setup https://gullerya.medium.com/github-actions-automated-commit-with-yet-required-checks-13eebf0d3c70
        # https://stackoverflow.com/questions/69263843/how-to-push-to-protected-main-branches-in-a-github-action
        with:
          token: ${{ secrets.WORKFLOW_GIT_ACCESS_TOKEN }}

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: |
          pip install -U pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry config virtualenvs.in-project false
          poetry config installer.parallel true

      - name: Extract service version
        run: |
          echo "VERSION=$(poetry version --short)" >> $GITHUB_ENV
          echo "$(poetry version --short)"

      - name: Push git tag version
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git tag -a ${{ env.VERSION }} -m "${{ env.VERSION }}"
          git push origin ${{ env.VERSION }}

      - name: Bump version with patch ready for next run
        run: |
          poetry version --short patch
          echo "VERSION_PATCHED=$(poetry version --short)" >> $GITHUB_ENV
          echo "$(poetry version --short)"

      - name: Commit patched semantic version ready for next run
        uses: EndBug/add-and-commit@v9.1.0
        with:
          add: "pyproject.toml"
          author_name: github_actor
          default_author: github_actor
          committer_name: GitHub Actions
          committer_email: 41898282+github-actions[bot]@users.noreply.github.com
          message: "github action has patched version to ${{ env.VERSION_PATCHED }}"
